/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package main;

import static org.junit.Assert.assertEquals;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Collections;
import java.util.Map;
import java.util.NoSuchElementException;

import javax.security.auth.login.AccountException;
import javax.security.auth.login.AccountNotFoundException;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import main.DTO.LoginRequestDTO;
import main.DTO.LoginResponseDTO;
import main.DTO.RegistryDTO;
import main.entity.UserEntity;
import main.entity.UserEntity.Admin;
import main.repository.UserRepository;
import main.service.JwtService;
import main.service.LoginService;

@SpringBootTest
@AutoConfigureMockMvc
class LibraryTest {
	
	@Autowired
    private MockMvc mvc;
	@Autowired
	private JwtService jwtService;
	@Autowired
	private LoginService loginService;
	@Autowired
	private UserRepository userRepos;
	
	private String userPermissionsID = "agewg242F1daA2";
	private String userPermissionsPassword = "Zfgt454T6ya1327";
	
	private String adminPermissionsId = "erj32478r8if78432";
	private String adminPermissionsPassword = "Zr3268ZWH48yy4";
	
    @Test
    @DisplayName("인가되지 않는 접근 차단")
    public void springSecurityTest() throws Exception {
    	mvc.perform(MockMvcRequestBuilders.get("/user/test").accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isForbidden());
    	
    	mvc.perform(MockMvcRequestBuilders.get("/admin/test").accept(MediaType.APPLICATION_JSON))
    	.andExpect(status().isForbidden());
    }
    
    @Test
    @DisplayName("잘못된 아이디 삽입")
    public void inputWrongId() throws Exception {
    	LoginRequestDTO login = new LoginRequestDTO();
    	login.setId("gGGfa3424gfg42.g3r3daws");
    	login.setPassword("2dg21g33g1bbfrh3112dq");
    	
    	Assertions.assertThrows(AccountNotFoundException.class , () -> loginService.login(login));
    }
    
    @Test
    @DisplayName("잘못된 비밀번호 삽입")
    public void inputWrongPassword() throws Exception {
    	UserEntity loginResult = userRepos.findById(userPermissionsID);
    	if(loginResult == null) {
    		RegistryDTO regisDto = RegistryDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    		loginService.register(regisDto); // 존재하지 않는 계정 가입    		
    	}
    	LoginRequestDTO login = new LoginRequestDTO();
    	login.setId(userPermissionsID);
    	login.setPassword(adminPermissionsPassword);
    	
    	Assertions.assertThrows(AccountNotFoundException.class , () -> loginService.login(login));
    }
    
    @Test
    @DisplayName("중복된 아이디 가입")
    public void existIdRepos() throws Exception {
    	UserEntity loginResult = userRepos.findById(userPermissionsID);
    	if(loginResult == null) {
    		RegistryDTO regisDto = RegistryDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    		loginService.register(regisDto); // 존재하지 않는 계정 가입    		
    	}
    	
    	RegistryDTO login = new RegistryDTO();
    	login.setId(userPermissionsID);
    	login.setPassword(userPermissionsPassword);
    	
    	Assertions.assertThrows(AccountException.class , () -> loginService.register(login));
    }
    
    @Test
    @DisplayName("변조된 RefreshToken 차단")
    public void tokenAuthorizationTest() throws Exception {
    	Assertions.assertThrows(NoSuchElementException.class , () -> jwtService.validateRefreshToken("thisIsNotValuableToken"));
    }
    
    @Test
    @DisplayName("인가된 USER 권한의 사용자 접근 허용")
    public void authorizationUserRequest() throws Exception {
    	UserEntity loginResult = userRepos.findById(userPermissionsID);
    	if(loginResult == null) {
    		RegistryDTO regisDto = RegistryDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    		loginService.register(regisDto); // 존재하지 않는 계정 가입    		
    	}
    	
    	LoginRequestDTO loginDto = LoginRequestDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    	LoginResponseDTO result = loginService.login(loginDto);
    	
    	mvc.perform(MockMvcRequestBuilders.get("/user/test").accept(MediaType.APPLICATION_JSON).header("Authorization", result.getAccessToken()))
    	.andExpect(status().isOk());
    }
    
    @Test
    @DisplayName("인가된 ADMIN 권한의 사용자 접근 허용")
    public void authorizationAdminRequest() throws Exception {
    	UserEntity loginResult = userRepos.findById(adminPermissionsId);
    	if(loginResult == null) {
    		UserEntity result = UserEntity.builder()
					.id(adminPermissionsId)
					.password(adminPermissionsPassword)
					.roles(Collections.singletonList("ROLE_ADMIN"))
					.admin(Admin.ADMin)
					.build();
    		
    		userRepos.save(result);
    	}
    	
    	LoginRequestDTO loginDto = LoginRequestDTO.builder().id(adminPermissionsId).password(adminPermissionsPassword).build();
    	LoginResponseDTO result = loginService.login(loginDto);
    	
    	mvc.perform(MockMvcRequestBuilders.get("/admin/test").accept(MediaType.APPLICATION_JSON).header("Authorization", result.getAccessToken()))
    	.andExpect(status().isOk());
    }
    
    @Test
    @DisplayName("RefreshToken 으로 새로운 AccessToken 발급")
    public void issueNewAccessToken() throws Exception {
    	UserEntity loginResult = userRepos.findById(userPermissionsID);
    	if(loginResult == null) {
    		RegistryDTO regisDto = RegistryDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    		loginService.register(regisDto); // 존재하지 않는 계정 가입    		
    	}
    	
    	LoginRequestDTO loginDto = LoginRequestDTO.builder().id(userPermissionsID).password(userPermissionsPassword).build();
    	LoginResponseDTO result = loginService.login(loginDto);
    	
    	Map<String, String> map = jwtService.validateRefreshToken(result.getRefreshToken());
    	assertEquals(map.get("code") , "1");
    }
}
